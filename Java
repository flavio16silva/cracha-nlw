<!--Live Server: é uma extensão que nos ajuda a ver as atualizações sem a necessidade de atualizar a pagina toda hora. Executando direto do VS Code para o navegador-->

<!-- A cada comando escrito atualizar a pagina a todo momento para executar os codigos-->

<!-- String: tudo que é texto, ou caracter livre. E sempre são colocados entre aspas " "-->
<!-- Boleano: é composto por true e false-->
<!-- Numero: são inseridos e entendidos sem as aspas. Podendo ser efetuado operações matematicas-->

<!-- Variaveis -->
<!-- variavel: local onde são armazenados os dados e podem ser levados para outros locais dentro do código-->
<!-- è importante o nome das variaveis serem descritivos das informações que irão dentro delas-->

<!-- variaveis: Let: são aquelas que seu conteúdo pode ser alterado no decorrer do código-->
<!-- variaveis: Const: são aquelas que seus conteúdos são constantes no decorrer do código-->
<!-- Variavel Tipo Objeto: guarda varias informações correlacionadas dentro de um unico local-->

<!--Para chamar a variavel dentro do objeto coloca-se . ex:. user.name, onde o name esta sendo chamado dentro do objeto-->
<!--Funçao é um dado estruturado. è um agrupamento de funções. Agrupar comandos a serem dados ao javascript-->

<!--Toda função acompanha abertura e fechamento de parenteses: function exemplo () {ação a ser executada fica dentro de chaves}-->
<!-- function showmesomething () {
  alert ('amigo estou aqui')
  }
  
  ShowMeSometihing ()
  -->

<!--DOW: documento criado pelo navegador com toda estrutura e elementos mapeados. E o Java consegue consultar e ver esse documento-->
<!--Boas Praticas-->
<!--camelCase-->
<!--PascalCase-->
<!--snake_case-->

<!-- DOM: Document Object Model-->

<!--A variavel "username" deve ser lançada no <h1......> para que possa ocorrer a mudança de nome no arquivo html. E escrita igualmente nas proximas funções a serem executadas, senão o html não reconhece-->

<!--ESTRUTURA DA FUNÇÃO:
function nomedafunção(argumentos) {
  código
  }-->

<!--Função Anonima: É uma função que não tem nome(nome da função). Comparando com a estrutura da função tradicional
argumento => {

}-->

<!-- function changeSocialMediaLinks() {
        document.getElementById('username').textContent = 'Flavio'
      }

      changeSocialMediaLinks()
      
      Opção para chamar dentro do DOM uma estrutura e mudar o nome-->

 <!--  function changeSocialMediaLinks() {
        userName.textContent = 'Flavio Silva'
      }

      changeSocialMediaLinks() outra Opção de chamar e alterar o Id-->  

  <!-- Laço de Repetição-->
  <!--FOR-->
  <!-- function changeSocialMediaLinks() {
        for (let i = 0; i <= 10; i++) {
          alert(i)
        }
      }

      changeSocialMediaLinks()-->

  <!--Quando for perguntar (de condição) algo ao JavaScript usa-se: ==. Porque quando usamos = esse sinal esta guardando uma informação dentro de uma variavel. ex.: i = 10 -->   

  <!-- Incrementação no Java-->
  <!-- Logica: i = i + 1 e no Java: i++-->
  <!--A variavel "socialLinks" deve ser lançada no <ul......-->
  <!--Variavel de Escopo: a variavel so existe quando o escopo que ele pertence esta sendo executado-->
  <!-- function changeSocialMediaLinks() {
        for (let li of socialLinks.children) {
          const social = li.getAttribute('class')
          alert(social)
        }
      }

      changeSocialMediaLinks()-->
  <!-- Nesse caso acima o FOR é o escopo para executação e existencia das variaveis: li e const .
  Estao sendo incrementadas dentro do laço criado pelo FOR-->

  <!--O computador conta posições ex.: Sempre começando do ZERO: 0123456789...O ser humando conta: 12345678910-->

  <!--Para mudar as redes sociais-->
  <!-- <script>
      const LinksSocialMedia = {  Contantes fixas
        github: 'flavio16silva',
        youtube: 'flaviosilva',
        facebook: 'flaviosilva',
        instagram: 'flaviosilva'
      }

      function changeSocialMediaLinks() {
        for (let li of socialLinks.children) {
          const social = li.getAttribute('class')

          li.children[0].href = `https://${social}.com/${LinksSocialMedia[social]}` Irá rodar as li decritas acima no HTML

          alert(li.children[0].href)
        }
      }

      changeSocialMediaLinks()
    </script>-->

  <!--API: Existem Públicas e Privadas-->
  <!-- Consumir API: ir em outra plataforma e pegar os dados para uso-->
  <!--Application Programming Interface (Interface de Programação de Aplicações) é basicamente um conjunto de rotinas e padrões estabelecidos por uma aplicação, para que outras aplicações possam utilizar as funcionalidades desta aplicação.
 - Responsável por estabelecer comunicação entre diferentes serviços.
 - Meio de campo entre as tecnologias.
 - Intermediador para troca de informações.-->

 <!--JSON-->
 <!-- Não é uma linguagem de programação é um documento para poder transacionar informações.-->
 <!--é um formato de intercâmbio de dados leve-->
 <!--é um formato de texto completamente independente da linguagem, mas usa convenções que são familiares aos programadores da família C de linguagens, incluindo C, C ++, C #, Java, JavaScript, Perl, Python e muitos outros. Essas propriedades tornam o JSON uma linguagem de intercâmbio de dados ideal.-->
 <!-- FETCH: Vai na rota(URL) da API vai pegar o JSON que a API responde e vai nos retornar-->

